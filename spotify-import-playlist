#!/usr/bin/env python3
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

# Setup App at https://developer.spotify.com and get your client id and secret.
# Export your authentication information:
#    export SPOTIPY_CLIENT_ID='your-id'
#    export SPOTIPY_CLIENT_SECRET='your-secret'
#    export SPOTIPY_REDIRECT_URI='http://127.0.0.1:19000'
# NOTE: SPOTIPY_REDIRECT_URI must match Redirect URI at developer.spotify.com 

import sys
import csv

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from spotipy.oauth2 import SpotifyOAuth

variants = [
    ['Хаски' ,'Husky'],
    ['Шарлот', 'Sharlot'],
    ['Célé', 'Cele'],
    ['René Amesz', 'Rene Amesz'],
    ['GIVĒON', 'Giveon']
]

if len(sys.argv) < 2:
    print(sys.argv[0] + " {playlist-file}")
    sys.exit()

playlist = sys.argv[1]

auth_manager = SpotifyClientCredentials()
scope = "playlist-read-private,playlist-modify-private"
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=scope))

user_id = sp.me()['id']

def get_playlist(user_id, name):
    playlists = sp.user_playlists(user_id)

    while playlists:
        for i, pl in enumerate(playlists['items']):
            print("%4d %s %s" % (i + 1 + playlists['offset'], pl['uri'],  pl['name']))
            if pl['name'] == playlist:
                print("Playlist '" + name + "' alreay exists")
                return pl

        if playlists['next']:
            playlists = sp.next(playlists)
        else:
            playlists = None

    return False

def compare_variants(variants, string):
    for artist in variants:
        if artist.lower() in string:
            return True

    return False

def check_artist_variants(artist, string):
    for avars in variants:
        for a in avars:
            if a.lower() == artist.lower():
                return compare_variants(avars, string)

    return False

def is_artist_in_string(artist, string):
    artist = artist.lower()
    string = string.lower()

    if artist in string:
        return True

    return check_artist_variants(artist, string)

# Check that there is no different artist (e.g. unwanted cover)
def is_artists_correct(artists, search_string):
    for a in artists:
        # replace to handle comma-separated artists like &-separated
        a['name'] = a['name'].replace(", ", " & ")
        # split multiple artists if needed
        if " & " in a['name']:
            names = a['name'].split(" & ")
        else:
            names = [a['name']]

        for name in names:
            if not is_artist_in_string(name, search_string):
                return False

    return True

def search_track(artist, song):
    bad_words = ['&', '(', ')', 'feat.', '[', ']', 'Mixed']
    search_string = "{} {}".format(artist, song)

    for bad in bad_words:
        search_string = search_string.replace(bad, '')

    # replace unicode curly apostrophe to ASCII apostrophe
    search_string = search_string.replace("’", "'")

    search = sp.search(search_string)
    tracks = search["tracks"]
    track_items = tracks["items"]

    if len(track_items) == 0:
        return False

    for t in track_items:
        if t["type"] != "track":
            continue

        if not is_artists_correct(t['artists'], search_string):
            continue

        return t

    # otherwise return first result
    for t in track_items:
        if t["type"] == "track":
            return t

    return False

pl = get_playlist(user_id, playlist)

if not pl:
    print("playlist '" + playlist + "' not found, creating new")
    pl = sp.user_playlist_create(user_id, playlist, public=False)

with open(playlist) as p:
    p_reader = csv.reader(p, delimiter='\t')
    for entry in p_reader:
        num, artist, song = entry

        full_name = "{}. {} - {}".format(num, artist, song)
        t = search_track(artist, song)

        if t == False:
            print("NOT FOUND: " + full_name)
            continue

        artists = [ sub['name'] for sub in t["artists"] ]
        real_name = "{} - {}".format(', '.join(artists), t["name"])

        sp.user_playlist_add_tracks(user_id, pl["id"], [t["id"]])

        print("OK: " + full_name + " (" + real_name + ")")
